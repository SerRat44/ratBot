<!DOCTYPE html>
<html>
<head>
  <title>btcWeb3ConnectTemplate</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="shortcut icon" href="https://your-site.com/your-icon.png" />
  <style>
    body {
      background-color: #f2f2f2;
	  margin: 4px;
	  overflow-y: auto;
    }
    #connect-wallet {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 10px;
      background-color: #fff;
      border: none;
      font-size: 16px;
      cursor: pointer;
    }
	button { margin: 4px; white-space: nowrap; }
    button:not([disabled]):hover { background-color: #ddd; cursor: pointer; }
    button:disabled { cursor: not-allowed; }
  
    .wallet-menu {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background-color: #fff;
      border: 1px solid #ccc;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
      z-index: 1;
	  flex-direction: column;
	  align-items: center;
      justify-content: center;
    }
    .wallet-menu h2 {
      margin-top: 0;
    }
    .wallet-menu button {
      margin-top: 10px;
      padding: 10px;
      font-size: 16px;
	  text-align: center;
      cursor: pointer;
    }
	#main-body {
	  display: flex;
	  flex-direction: column;
	  align-items: center;
      justify-content: center;
	  margin-top: 50px;
	}
  </style>
</head>

<body>
  <button id="connect-wallet">Connect Wallet</button>
  <div id="select-menu" class="wallet-menu">
    <h2>Select Wallet</h2>
    <button id="unisat-wallet">UniSat Wallet</button>
  </div>
  <div id="options-menu" class="wallet-menu">
    <h2>Options</h2>
    <button id="disconnect-wallet">Disconnect</button>
  </div>
  
  <div id="main-body">
    <button id="check-wallet">Check Wallet</button>
  </div>

  <script>
//start of wallet connect
	const wallets = {
  unisat: {
    connect: async () => await window.unisat.requestAccounts(),
    getAccounts: async () => await window.unisat.getAccounts(),
    getNetwork: async () => await window.unisat.getNetwork(),
    switchNetwork: async (network) => await window.unisat.switchNetwork(network),
    getPublicKey: async () => await window.unisat.getPublicKey(),
    getBalance: async () => await window.unisat.getBalance(),
    getInscriptions: async (cursor, size) => await window.unisat.getInscriptions(cursor, size),
    sendBitcoin: async (toAddress, satoshis, options) => await window.unisat.sendBitcoin(toAddress, satoshis, options),
    sendInscription: async (address, inscriptionId, options) => await window.unisat.sendInscription(address, inscriptionId, options),
    signMessage: async (msg, address) => await window.unisat.signMessage(msg, address),
    pushTx: async (options) => await window.unisat.pushTx(options),
    signPsbt: async (psbtHex) => await window.unisat.signPsbt(psbtHex),
    pushPsbt: async (psbtHex) => await window.unisat.pushPsbt(psbtHex),
    onAccountsChanged: (handler) => window.unisat.on('accountsChanged', handler),
    offAccountsChanged: (handler) => window.unisat.removeListener('accountsChanged', handler),
    onNetworkChanged: (handler) => window.unisat.on('networkChanged', handler),
    offNetworkChanged: (handler) => window.unisat.removeListener('networkChanged', handler),
  },
};

let activeWallet;

function initializeWallet() {
  
	const connectButton = document.getElementById('connect-wallet');
    const selectMenu = document.getElementById('select-menu');
    const unisatButton = document.getElementById('unisat-wallet');
    const optionsMenu = document.getElementById('options-menu');
    const disconnectButton = document.getElementById('disconnect-wallet');
	
	const setMenuVisibility = (menu, isVisible) => {
		menu.style.display = isVisible ? 'flex' : 'none';
    };
	
    const resetConnectButton = () => {
		connectButton.textContent = 'Connect Wallet';
    };
	
	const handleBodyClick = (event) => {
      if (
        event.target !== connectButton &&
        event.target !== selectMenu &&
        event.target !== unisatButton &&
        event.target !== optionsMenu &&
        event.target !== disconnectButton
      ) {
        setMenuVisibility(selectMenu, false);
        setMenuVisibility(optionsMenu, false);
      }
    };
	document.addEventListener('click', handleBodyClick);
	
	const disconnectWallet = async () => {
    try {	  
	activeWallet = null;
      resetConnectButton();
      optionsMenu.style.display = "none";
      console.log("disconnect successful");
    } catch (e) {
      console.log("disconnect failed");
    }
  };
	
	const connectWallet = async (walletKey) => {
    try {
      activeWallet = wallets[walletKey];
      const accounts = await activeWallet.connect();
      connectButton.textContent = `${accounts[0].substr(0, 8)}...`;
      selectMenu.style.display = "none";
	  console.log("connect successful");
    } catch (e) {
      console.log("connect failed");
    }
  };
  
	connectButton.addEventListener('click', () => {
      if (connectButton.textContent !== 'Connect Wallet') {
        setMenuVisibility(optionsMenu, true);
      } else {
        setMenuVisibility(selectMenu, true);
      }
    });
  
  unisatButton.addEventListener("click", () => {
	connectWallet("unisat");
	});
  
  disconnectButton.addEventListener("click", disconnectWallet);
  
}
// end of wallet connect

const checkWalletButton = document.getElementById('check-wallet');

checkWalletButton.addEventListener('click', async () => {
  if (!activeWallet) {
    alert('Please connect your wallet first.');
    return;
  }

  try {
    const address = await activeWallet.getAccounts();
    console.log('Address:', address);

    const balance = await activeWallet.getBalance();
    console.log('Balance:', balance);

    const inscriptions = await activeWallet.getInscriptions(0, 10);
    console.log('Number of Inscriptions:', inscriptions.total);

  } catch (e) {
    console.log(e);
  }
});


initializeWallet();

  </script>
</body>
</html>
